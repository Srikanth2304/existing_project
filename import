import Box from '@mui/material/Box';
import TextField from '@mui/material/TextField';


import React, { useState, useEffect } from 'react'
import TradeDataJson from './Trade_Data.json'
import styles from './style/Table.css'
import './style/Pagination.css'
import { useHistory } from "react-router-dom";
import ViewPDF from './ViewPDF';
import GeneratePDF from './GeneratePDF'
import ViewTrade from './ViewTrade';
import MakersCheck from './MakersCheck';
import CheckersCheck from './CheckersCheck';
// font awesome
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import TextField from '@mui/material/TextField';


function TradeTable() {
    // list containing all trade info
    const [tradeData, setTradeData] = useState([]);
    // set trade data from imported json file
    useEffect(() => {
        setTradeData(TradeDataJson)
    }, []);


    /*
    *
    *
    *         Trade table related functions 
    * 
    * 
    */

    // trade object to be passed in selected button component's props
    const [currentTradeObject, setCurrentTradeObject] = useState({});


    // variable to show or hide GeneratePDF component
    const [isGeneratePDF, setIsGeneratePDF] = useState(false);
    function toggleGeneratePDF() {
        setIsGeneratePDF(!isGeneratePDF);
    }

    // variable to show or hide ViewPDF component
    const [isViewPDF, setIsViewPDF] = useState(false);
    function toggleViewPDF() {
        setIsViewPDF(!isViewPDF);
    }

    // variable to show or hide ViewTrade component
    const [isViewTrade, setIsViewTrade] = useState(false);
    function toggleViewTrade() {
        setIsViewTrade(!isViewTrade);
    }

    // variable to show or hide MakersCheck component
    const [isMakersCheck, setIsMakersCheck] = useState(false);
    function toggleMakersCheck() {
        setIsMakersCheck(!isMakersCheck);
    }

    // variable to show or hide CheckersCheck component
    const [isCheckersCheck, setIsCheckersCheck] = useState(false);
    function toggleCheckersCheck() {
        setIsCheckersCheck(!isCheckersCheck);
    }

    // functions to executed after respective button click  
    function handleGeneratePDF(trade) {
        // set currentTradeObject state to this buttons trade
        setCurrentTradeObject(trade);
        // set isGeneratePDF variable to true which will show popup 
        setIsGeneratePDF(true);
    }
    function handleViewPDF(trade) {
        setCurrentTradeObject(trade);
        setIsViewPDF(true);
    }
    function handleViewTrade(trade) {
        setCurrentTradeObject(trade);
        setIsViewTrade(true);
    }
    function handleMakersCheck(trade) {
        setCurrentTradeObject(trade);
        setIsMakersCheck(true);
    }
    function handleCheckersCheck(trade) {
        setCurrentTradeObject(trade);
        setIsCheckersCheck(true);
    }
    function handleRow(trade) {
        if (trade.Status == 'New XML') {
            handleGeneratePDF(trade);
        }
        else if (trade.Status == 'Outbound Sent') {
            handleViewPDF(trade);
        }
        else if (trade.Status == 'Inbound Received') {
            handleMakersCheck(trade);
        }
        else if (trade.Status == 'Makers Confirmed') {
            handleCheckersCheck(trade);
        }
        else if (trade.Status == 'Checkers confirmed') {
            handleViewTrade(trade);
        }
        else if (trade.Status == 'Rejected') {
            handleViewTrade(trade);
        }
    }

    // jsx script for rendering table based in tradeData values
    // seperately created this jsx in renderData variable for better readability
    const renderData = (tradeData) => {
        return (
            <div>
                <table className="table table-striped table-hover table-container">
                    <thead className={styles['table-header']}>
                        <tr>
                            <th>Trade ID <span onClick={() => { handleSort("id") }}><FontAwesomeIcon icon="fa-solid fa-sort" size="xs" /></span></th>
                            <th>Party 1 <span onClick={() => { handleSort("party1") }}><FontAwesomeIcon icon="fa-solid fa-sort" size="xs" /></span></th>
                            <th>Party 2 <span onClick={() => { handleSort("party2") }}><FontAwesomeIcon icon="fa-solid fa-sort" size="xs" /></span></th>
                            {/* <th>Product</th> */}
                            {/* <th>Counterparty <span onClick={() => { handleSort("counterparty") }}><FontAwesomeIcon icon="fa-solid fa-sort" size="xs" /></span></th> */}
                            <th>Currency 1 <span onClick={() => { handleSort("ExchangedCurrency1") }}><FontAwesomeIcon icon="fa-solid fa-sort" size="xs" /></span></th>
                            <th>Currency 2 <span onClick={() => { handleSort("ExchangedCurrency1") }}><FontAwesomeIcon icon="fa-solid fa-sort" size="xs" /></span></th>
                            <th>Amount <span onClick={() => { handleSort("Amount") }}><FontAwesomeIcon icon="fa-solid fa-sort" size="xs" /></span></th>
                            <th>Date <span onClick={() => { handleSort("Date") }}><FontAwesomeIcon icon="fa-solid fa-sort" size="xs" /></span></th>
                            <th>Status <span onClick={() => { handleSort("Status") }}><FontAwesomeIcon icon="fa-solid fa-sort" size="xs" /></span></th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        {tradeData && tradeData.map(trade => (
                            <tr >
                                <th scope='row' onClick={() => { handleRow(trade) }}>
                                    {trade.id}
                                </th>
                                <td onClick={() => { handleRow(trade) }}>
                                    {trade.party1}
                                </td>
                                <td onClick={() => { handleRow(trade) }}>
                                    {trade.party2}
                                </td>
                                {/* <td>{trade.product}</td> */}
                                {/* <td>
                                    <a onClick={() => { handleRow(trade) }}>
                                        {trade.counterparty}
                                    </a>
                                </td> */}
                                <td onClick={() => { handleRow(trade) }}>
                                    {trade.ExchangedCurrency1}
                                </td>
                                <td onClick={() => { handleRow(trade) }}>
                                    {trade.ExchangedCurrency2}
                                </td>
                                <td onClick={() => { handleRow(trade) }}>
                                    {trade.Amount}
                                </td>
                                <td onClick={() => { handleRow(trade) }}>
                                    {trade.Date}
                                </td>
                                <td onClick={() => { handleRow(trade) }}>
                                    {trade.Status}
                                </td>
                                <td>
                                    <button className='btn btn-primary' style={{ width: '120px' }} onClick={() => { handleViewTrade(trade) }}>Trade View</button>
                                    <button className='btn btn-primary' style={{ width: '120px',marginLeft:'10px' }} onClick={() => { handleViewTrade(trade) }}>Trade Audit</button>
                                    {/* {trade.Status == 'New XML' ? <button className='btn btn-primary' style={{ width: '160px' }} onClick={() => { handleGeneratePDF(trade) }}>Generate PDF</button> : null}
                                    {trade.Status == 'Outbound Sent' ? <button className='btn btn-primary' style={{ width: '160px' }} onClick={() => { handleViewPDF(trade) }}>View PDF</button> : null}
                                    {trade.Status == 'Inbound Received' ? <button className='btn btn-primary' style={{ width: '160px' }} onClick={() => { handleMakersCheck(trade) }}>Makers Check</button> : null}
                                    {trade.Status == 'Makers Confirmed' ? <button className='btn btn-primary' style={{ width: '160px' }} onClick={() => { handleCheckersCheck(trade) }}>Checkers Check</button> : null}
                                    {trade.Status == 'Checkers confirmed' ? <button className='btn btn-primary' style={{ width: '160px' }} onClick={() => { handleViewTrade(trade) }}>View Trade</button> : null}
                                    {trade.Status == 'Rejected' ? <button className='btn btn-primary' style={{ width: '160px' }} onClick={() => { handleViewTrade(trade) }}>View Trade</button> : null} */}
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>

            </div>
        );
    };

    /*
    *
    *
    *         Pagination related functions 
    * 
    * 
    */
    // pagination section
    const [currentPage, setcurrentPage] = useState(1);
    const [itemsPerPage, setitemsPerPage] = useState(6);
    const [pageNumberLimit, setpageNumberLimit] = useState(4);
    const [maxPageNumberLimit, setmaxPageNumberLimit] = useState(5);
    const [minPageNumberLimit, setminPageNumberLimit] = useState(0);
    const pages = [];
    for (let i = 1; i <= Math.ceil(tradeData.length / itemsPerPage); i++) {
        pages.push(i);
    }
    const indexOfLastItem = currentPage * itemsPerPage;
    const indexOfFirstItem = indexOfLastItem - itemsPerPage;
    const currentItems = tradeData.slice(indexOfFirstItem, indexOfLastItem);

    const handleClick = (event) => {
        setcurrentPage(Number(event.target.id));
    };
    const renderPageNumbers = pages.map((number) => {
        if (number < maxPageNumberLimit + 1 && number > minPageNumberLimit) {
            return (
                <li
                    key={number}
                    id={number}
                    onClick={handleClick}
                    className={currentPage == number ? "active" : null}
                >
                    {number}
                </li>
            );
        } else {
            return null;
        }
    });

    const handleNextbtn = () => {
        setcurrentPage(currentPage + 1);

        if (currentPage + 1 > maxPageNumberLimit) {
            setmaxPageNumberLimit(maxPageNumberLimit + pageNumberLimit);
            setminPageNumberLimit(minPageNumberLimit + pageNumberLimit);
        }
    };

    const handlePrevbtn = () => {
        setcurrentPage(currentPage - 1);

        if ((currentPage - 1) % pageNumberLimit == 0) {
            setmaxPageNumberLimit(maxPageNumberLimit - pageNumberLimit);
            setminPageNumberLimit(minPageNumberLimit - pageNumberLimit);
        }
    };

    let pageIncrementBtn = null;
    if (pages.length > maxPageNumberLimit) {
        pageIncrementBtn = <li onClick={handleNextbtn}> &hellip; </li>;
    }

    let pageDecrementBtn = null;
    if (minPageNumberLimit >= 1) {
        pageDecrementBtn = <li onClick={handlePrevbtn}> &hellip; </li>;
    }
    // pagination end


    /*
    *
    *
    *         Table Search related functions 
    * 
    * 
    */
    const [searchColumn, setSearchColumn] = useState('id');
    const [searchColumnData, setSearchColumnData] = useState('');

    // activated whenever searchColumn selection changed 
    // eg change from TradeID to Status in filter search section
    useEffect(() => {
        setSearchColumnData('');
        setTradeData(TradeDataJson)
    }, [searchColumn]);
    const onSearchColumnChange = (e) => {
        setSearchColumn(e.target.value)
    }

    // activated whenever searchColumn selection changed 
    // eg change from TradeID to Status in filter search section
    useEffect(() => {
        if (searchColumnData != '') {
            setTradeData(TradeDataJson.filter(tradeobj => {
                const content = tradeobj[searchColumn].toString();
                if (content.startsWith(searchColumnData)) {
                    return true;
                }
                else {
                    return false;
                }
            }));
        }
        else {
            setTradeData(TradeDataJson);
        }

    }, [searchColumnData]);
    const onSearchColumnDataChange = (e) => {
        setSearchColumnData(e.target.value)
    }


    /*
    *
    *
    *         Table sort related functions 
    * 
    * 
    */
    const [sortColumn, setSortColumn] = useState('id');
    const [sortColumnAlignment, setSortColumnAlignment] = useState(0); // 1 for ascending, -1 desc, 0 for no sort

    function handleSort(colName) {
        if (colName == sortColumn) {
            if (sortColumnAlignment == 1) {
                setSortColumnAlignment(-1);
            }
            else if (sortColumnAlignment == -1) {
                setSortColumnAlignment(0);
            }
            else {
                setSortColumnAlignment(1);
            }
        }
        else {
            setSortColumn(colName);
        }
        console.log(colName)
        console.log(sortColumnAlignment)
    }
    useEffect(() => {
        if (sortColumnAlignment == 0) {
            setTradeData(TradeDataJson);
        }
        else if (sortColumnAlignment == 1) {
            let sortedTradeDataJson = [...TradeDataJson].sort(
                (p1, p2) => (p1[sortColumn] < p2[sortColumn]) ? 1 : (p1[sortColumn] > p2[sortColumn]) ? -1 : 0);
            setTradeData(sortedTradeDataJson);
        }
        else {
            let sortedTradeDataJson = [...TradeDataJson].sort(
                (p1, p2) => (p1[sortColumn] < p2[sortColumn]) ? -1 : (p1[sortColumn] > p2[sortColumn]) ? 1 : 0);
            setTradeData(sortedTradeDataJson);
        }

    }, [sortColumnAlignment]);


    return (
        <div>
            {/* pop section: hidden initially */}
            {isGeneratePDF && <GeneratePDF handleClose={toggleGeneratePDF} tradeData={currentTradeObject} />}
            {isViewPDF && <ViewPDF handleClose={toggleViewPDF} tradeData={currentTradeObject} />}
            {isViewTrade && <ViewTrade handleClose={toggleViewTrade} tradeData={currentTradeObject} />}
            {isMakersCheck && <MakersCheck handleClose={toggleMakersCheck} tradeData={currentTradeObject} />}
            {isCheckersCheck && <CheckersCheck handleClose={toggleCheckersCheck} tradeData={currentTradeObject} />}

            {/* table section */}
            <div className='row d-flex justify-content-center py-4 px-2' style={{ margin: '0', padding: '0', overflow: 'hidden', maxWidth: '100%' }}>
                <h2>Trades List</h2>
                {/* Search Filter Section */}
                <div>
                    <form className="form my-4" >
                        <span className="form-group m-1">
                            <label className="me-2 fw-medium" for="id">Filter By</label>
                            <select
                                name="search-column"
                                value={searchColumn}
                                id="search-column"
                                type="text"
                                placeholder="search-column"
                                onChange={e => onSearchColumnChange(e)}
                                style={{ padding: '2.5px' }}
                            >
                                <option value="id">Trade ID</option>
                                <option value="party1">Party 1</option>
                                <option value="party2">Party 2</option>
                                <option value="counterparty">Counterparty</option>
                                <option value="ExchangedCurrency1">Currency 1</option>
                                <option value="ExchangedCurrency2">Currency 2</option>
                                <option value="Amount">Amount</option>
                                <option value="Date">Settlement Date</option>
                                <option value="Status">Status</option>
                            </select>

                        </span>
                        <span className="form-group mb-1 mt-1">
                            <input
                                name="search-column-data"
                                value={searchColumnData}
                                id="search-column-data"
                                type="text"
                                placeholder="Search"
                                onChange={e => onSearchColumnDataChange(e)}
                            />
                        </span>
                    </form>
                </div>
                <div className='col-lg-12'>
                    {renderData(currentItems)}
                </div>

                {/* pagination */}
                <div className='col-lg-4 col-md-6'>
                    <ul className="pageNumbers ">
                        <li style={{ padding: '0', marginRight: '7px' }}>
                            <button
                                onClick={handlePrevbtn}
                                disabled={currentPage == pages[0] ? true : false}

                            >
                                <i class="bi bi-arrow-return-left">prev</i>
                            </button>
                        </li>
                        {pageDecrementBtn}
                        {renderPageNumbers}
                        {pageIncrementBtn}

                        <li style={{ padding: '0', marginLeft: '7px' }}>
                            <button
                                onClick={handleNextbtn}
                                disabled={currentPage == pages[pages.length - 1] ? true : false}
                            >
                                Next
                            </button>
                        </li>
                    </ul>
                </div>


            </div>
        </div>
    )
}

export default TradeTable
